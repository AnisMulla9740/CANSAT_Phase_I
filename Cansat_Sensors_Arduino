/*
  Cansat Weather Monitoring System - Sensor Node
  Hardware: Arduino Nano, DS3231 RTC, BMP390, TMP117, BMI270, GPS, INA219
  Features:
    - Reads multiple environmental sensors
    - Includes calibration routines
    - Timestamps all readings with RTC
    - Prioritizes data transmission
    - Outputs CSV format for ESP32 via Serial
*/

#include <Wire.h>
#include <Adafruit_BMP3XX.h>    // BMP390 Pressure/Altitude
#include <Adafruit_TMP117.h>    // TMP117 Temperature
#include <Adafruit_BMI270.h>    // BMI270 IMU
#include <Adafruit_INA219.h>    // INA219 Voltage/Current
#include <TinyGPS++.h>          // GPS Parsing
#include <SoftwareSerial.h>     // GPS Communication
#include <RTClib.h>             // DS3231 RTC

// =============================================================================
// I2C ADDRESS CONFIGURATION (Verify with physical jumpers)
// =============================================================================
#define BMP390_ADDR  0x77       // SD0: HIGH=0x77, LOW=0x76
#define TMP117_ADDR  0x48       // ADR0: Float=0x48, GND=0x49, VCC=0x4A
#define BMI270_ADDR  0x69       // SDO: LOW=0x68, HIGH=0x69
#define INA219_ADDR  0x40       // Default address
#define DS3231_ADDR  0x68       // Fixed address for DS3231

// =============================================================================
// SENSOR OBJECTS
// =============================================================================
Adafruit_BMP3XX bmp;            // Pressure/Altitude
Adafruit_TMP117 tmp;            // Temperature
Adafruit_BMI270 imu;            // IMU
Adafruit_INA219 ina219(INA219_ADDR);  // Voltage/Current
TinyGPSPlus gps;                // GPS Parser
RTC_DS3231 rtc;                 // Real-Time Clock
SoftwareSerial gpsSerial(2, 3); // RX=D2, TX=D3 (GPS Module)

// =============================================================================
// CALIBRATION PARAMETERS (Adjust during testing)
// =============================================================================
// Barometric Pressure
float SEA_LEVEL_PRESSURE = 1013.25; // hPa (calibrate to local weather service)

// Voltage Measurement
const float VOLTAGE_DIVIDER_RATIO = 5.0;  // R2/(R1+R2) - e.g. 100k+20k: 20/120=0.1667
float VOLTAGE_CAL_FACTOR = 1.0;           // Multiplier for fine-tuning

// Current Measurement
const float CURRENT_SENSITIVITY = 0.1;    // V/A (e.g. ACS712-20A=0.1, 5A=0.185)
float CURRENT_ZERO_OFFSET = 0.0;          // Voltage at zero current (calibrated)

// IMU Offsets
float IMU_X_OFFSET = 0.0;
float IMU_Y_OFFSET = 0.0;
float IMU_Z_OFFSET = 0.0;

// =============================================================================
// SYSTEM VARIABLES
// =============================================================================
unsigned long lastHighPriority = 0;   // Last H-priority transmission
unsigned long lastLowPriority = 0;    // Last L-priority transmission
bool rtcInitialized = false;          // RTC status flag

// =============================================================================
// SETUP ROUTINE
// =============================================================================
void setup() {
  Serial.begin(115200);  // Initialize serial for ESP32 communication
  gpsSerial.begin(9600); // Initialize GPS serial
  
  Wire.begin();          // Start I2C communication
  delay(100);            // Allow devices to power up

  // Initialize RTC with error handling
  if (!rtc.begin(DS3231_ADDR, &Wire)) {
    Serial.println("#ERR,RTC_NOT_FOUND");
  } else {
    rtcInitialized = true;
    // Set to compile time if power was lost
    if (rtc.lostPower()) {
      rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    }
  }

  // Initialize BMP390 Pressure Sensor
  if (!bmp.begin_I2C(BMP390_ADDR)) {
    Serial.println("#ERR,BMP390_FAIL");
  } else {
    bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
    bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
  }

  // Initialize TMP117 Temperature Sensor
  if (!tmp.begin_I2C(TMP117_ADDR)) {
    Serial.println("#ERR,TMP117_FAIL");
  }

  // Initialize BMI270 IMU
  if (!imu.begin_I2C(BMI270_ADDR)) {
    Serial.println("#ERR,BMI270_FAIL");
  } else {
    imu.setRange(BMI270_RANGE_4G);
    calibrateIMU();  // Perform IMU calibration
  }

  // Initialize INA219 Power Monitor
  if (!ina219.begin()) {
    Serial.println("#ERR,INA219_FAIL");
  } else {
    calibrateCurrentSensor();  // Perform current sensor calibration
  }

  // Perform voltage calibration
  calibrateVoltageSensor();
}

// =============================================================================
// MAIN LOOP
// =============================================================================
void loop() {
  // Continuously feed GPS data to parser
  while (gpsSerial.available() > 0) {
    gps.encode(gpsSerial.read());
  }

  unsigned long currentMillis = millis();

  // High-Priority Data (IMU, Pressure, Temp, GPS) - Every 100ms
  if (currentMillis - lastHighPriority >= 100) {
    Serial.println(readHighPrioritySensors());
    lastHighPriority = currentMillis;
  }

  // Low-Priority Data (Voltage, Current) - Every 1000ms
  if (currentMillis - lastLowPriority >= 1000) {
    Serial.println(readLowPrioritySensors());
    lastLowPriority = currentMillis;
  }
}

// =============================================================================
// SENSOR CALIBRATION ROUTINES
// =============================================================================

// Calibrate IMU offsets (assumes stationary during startup)
void calibrateIMU() {
  const int samples = 100;
  float sumX = 0, sumY = 0, sumZ = 0;
  
  for (int i = 0; i < samples; i++) {
    sensors_event_t event;
    imu.getEvent(&event);
    sumX += event.acceleration.x;
    sumY += event.acceleration.y;
    sumZ += event.acceleration.z;
    delay(10);
  }
  
  IMU_X_OFFSET = sumX / samples;
  IMU_Y_OFFSET = sumY / samples;
  // Expected Z-axis gravity (subtract 9.81 m/sÂ²)
  IMU_Z_OFFSET = (sumZ / samples) - 9.80665;
}

// Calibrate current sensor zero point (no load condition)
void calibrateCurrentSensor() {
  const int samples = 50;
  float sum = 0;
  
  for (int i = 0; i < samples; i++) {
    sum += ina219.getShuntVoltage_mV(); 
    delay(10);
  }
  
  CURRENT_ZERO_OFFSET = sum / samples;
}

// Calibrate voltage measurement (requires known reference voltage)
void calibrateVoltageSensor() {
  const float KNOWN_VOLTAGE = 5.0; // Use regulated 5V reference
  const int samples = 50;
  float sum = 0;
  
  for (int i = 0; i < samples; i++) {
    sum += analogRead(A0);
    delay(10);
  }
  
  float measured = (sum / samples) * (5.0 / 1023.0);
  VOLTAGE_CAL_FACTOR = KNOWN_VOLTAGE / measured;
}

// =============================================================================
// DATA ACQUISITION FUNCTIONS
// =============================================================================

// Read high-priority sensors and format data
String readHighPrioritySensors() {
  String data = "H,";  // High-priority marker
  
  // Add timestamp
  if (rtcInitialized) {
    DateTime now = rtc.now();
    data += String(now.year()) + padZero(now.month()) + padZero(now.day());
    data += "-";
    data += padZero(now.hour()) + padZero(now.minute()) + padZero(now.second());
  } else {
    data += "00000000-000000";
  }
  data += ",";

  // Read IMU data with calibration
  if (imu.begin_I2C()) {
    sensors_event_t event;
    imu.getEvent(&event);
    data += String(event.acceleration.x - IMU_X_OFFSET, 4) + ",";
    data += String(event.acceleration.y - IMU_Y_OFFSET, 4) + ",";
    data += String(event.acceleration.z - IMU_Z_OFFSET, 4) + ",";
  } else {
    data += "NaN,NaN,NaN,";
  }

  // Read pressure/altitude
  if (bmp.begin_I2C()) {
    bmp.performReading();
    data += String(bmp.pressure, 2) + ",";
    data += String(bmp.readAltitude(SEA_LEVEL_PRESSURE), 2) + ",";
  } else {
    data += "NaN,NaN,";
  }

  // Read temperature
  if (tmp.begin_I2C()) {
    data += String(tmp.readTempC(), 2) + ",";
  } else {
    data += "NaN,";
  }

  // Read GPS data
  if (gps.location.isValid()) {
    data += String(gps.location.lat(), 6) + ",";
    data += String(gps.location.lng(), 6) + ",";
    data += gps.satellites.isValid() ? String(gps.satellites.value()) : "0";
  } else {
    data += "NaN,NaN,0";
  }

  return data;
}

// Read low-priority sensors and format data
String readLowPrioritySensors() {
  String data = "L,";  // Low-priority marker
  
  // Add timestamp
  if (rtcInitialized) {
    DateTime now = rtc.now();
    data += String(now.year()) + padZero(now.month()) + padZero(now.day());
    data += "-";
    data += padZero(now.hour()) + padZero(now.minute()) + padZero(now.second());
  } else {
    data += "00000000-000000";
  }
  data += ",";

  // Read voltage (with calibration)
  float rawVoltage = analogRead(A0) * (5.0 / 1023.0);
  float voltage = rawVoltage * VOLTAGE_DIVIDER_RATIO * VOLTAGE_CAL_FACTOR;
  data += String(voltage, 2) + ",";

  // Read current (with calibration)
  float shuntVoltage = ina219.getShuntVoltage_mV() - CURRENT_ZERO_OFFSET;
  float current = shuntVoltage / (CURRENT_SENSITIVITY * 1000); // Convert mV to V
  data += String(current, 3);

  return data;
}

// =============================================================================
// HELPER FUNCTIONS
// =============================================================================

// Pad single-digit numbers with leading zero
String padZero(int number) {
  if (number < 10) {
    return "0" + String(number);
  }
  return String(number);
}
