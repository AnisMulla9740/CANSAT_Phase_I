"""
Title: offline_dashboard_tkinter.py

Description:
  • Opens the USB-Serial port connected to the Base Station ESP32 (which forwards LoRa data).
  • Reads each incoming CSV line (15 comma-separated fields) in a background thread.
  • Logs each line into 'data.csv' for offline storage.
  • Keeps the last MAX_RECORDS rows in memory in a list named `records`.
  • Uses Tkinter to build a desktop GUI with two tabs:
      1) “Data Table” tab: shows recent rows in a scrollable table (Treeview).
      2) “Temperature Graph” tab: plots BMP temperature vs. timestamp using Matplotlib.
  • The GUI refreshes itself every second to display new data in both tabs.

Dependencies:
  • pyserial
  • matplotlib
  • tkinter (built-in with Python)
  • (Optional) If your Python install separates tkinter, install via your package manager.

To install dependencies, run:
    pip install pyserial matplotlib

Before running:
  • Edit SERIAL_PORT to match your OS port (e.g., 'COM3' on Windows or '/dev/ttyUSB0' on Linux/Mac).
  • Ensure you have write permission in this folder (for data.csv).

Run:
    python offline_dashboard_tkinter.py
"""

'------------------------------------------------------------------------------------------------'
import os
import threading
import time
import csv
import serial
import tkinter as tk
from tkinter import ttk
from datetime import datetime
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import matplotlib.dates as mdates

# ==== UPDATED CONFIGURATION ====
SERIAL_PORT = 'COM3'     # Change to your serial port
BAUD_RATE = 115200
CSV_FILE = 'data.csv'
MAX_RECORDS = 500
# ===============================

records = []

def serial_reader():
    """
    Revised serial reader that:
    - Parses LoRa packet header
    - Handles both H and L data types
    - Maintains correct field structure
    """
    try:
        ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
    except Exception as e:
        print(f"ERROR: Could not open serial port {SERIAL_PORT}: {e}")
        return

    time.sleep(2)

    # Create CSV with proper headers
    if not os.path.isfile(CSV_FILE):
        with open(CSV_FILE, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([
                'type', 'timestamp', 'imu_x', 'imu_y', 'imu_z', 
                'pressure', 'altitude', 'temperature', 
                'latitude', 'longitude', 'sats',
                'voltage', 'current'
            ])

    while True:
        try:
            raw_line = ser.readline().decode('utf-8', errors='ignore').strip()
        except Exception:
            continue

        if not raw_line:
            continue

        # Parse LoRa packet: [PACKET#][RSSI][CRC16]|DATA
        if '|' not in raw_line:
            continue
            
        header_part, data_part = raw_line.split('|', 1)
        data_fields = data_part.split(',')
        
        # Process High-priority packets
        if data_fields[0] == 'H' and len(data_fields) == 11:
            # H,timestamp,imu_x,imu_y,imu_z,pressure,altitude,temp,lat,lon,sats
            record = [
                'H',  # type
                data_fields[1],  # timestamp
                *data_fields[2:5],  # imu x,y,z
                *data_fields[5:8],  # pressure, altitude, temp
                *data_fields[8:11]  # lat, lon, sats
            ]
            # Pad missing fields
            record.extend(['', ''])  # voltage, current
            
            with open(CSV_FILE, 'a', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(record[:-2])  # Save without empty voltage/current
                
            records.append(record)
            
        # Process Low-priority packets
        elif data_fields[0] == 'L' and len(data_fields) == 4:
            # L,timestamp,voltage,current
            record = [
                'L',  # type
                data_fields[1],  # timestamp
                *['']*3,  # imu x,y,z (empty)
                *['']*3,  # pressure, altitude, temp (empty)
                *['']*3,  # lat, lon, sats (empty)
                *data_fields[2:4]  # voltage, current
            ]
            
            with open(CSV_FILE, 'a', newline='') as f:
                writer = csv.writer(f)
                writer.writerow([
                    'L', data_fields[1], 
                    *data_fields[2:4]  # voltage, current
                ])
                
            records.append(record)
            
        # Maintain buffer size
        if len(records) > MAX_RECORDS:
            records.pop(0)

# Start serial reader thread
threading.Thread(target=serial_reader, daemon=True).start()

# ==== REVISED TKINTER GUI ====

class DashboardApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Cansat Ground Station Dashboard")
        self.geometry("1200x700")
        self.configure(bg='#2c3e50')

        # Custom style
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.style.configure('TNotebook', background='#34495e')
        self.style.configure('TNotebook.Tab', background='#34495e', foreground='white')
        self.style.map('TNotebook.Tab', background=[('selected', '#1abc9c')])

        # Create tabs
        self.notebook = ttk.Notebook(self)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Create frames
        self.table_frame = ttk.Frame(self.notebook)
        self.graph_frame = ttk.Frame(self.notebook)
        
        self.notebook.add(self.table_frame, text="Sensor Data")
        self.notebook.add(self.graph_frame, text="Temperature Analysis")
        
        # Setup tabs
        self._setup_table_tab()
        self._setup_graph_tab()
        
        # Status bar
        self.status = tk.Label(self, text="Receiving data...", bd=1, relief=tk.SUNKEN, anchor=tk.W)
        self.status.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Start refresh cycle
        self.last_update = time.time()
        self.after(1000, self.refresh_gui)

    def _setup_table_tab(self):
        """Setup the data table with proper columns"""
        columns = [
            'Type', 'Timestamp', 'IMU X', 'IMU Y', 'IMU Z',
            'Pressure (hPa)', 'Altitude (m)', 'Temp (°C)',
            'Latitude', 'Longitude', 'Sats',
            'Voltage (V)', 'Current (A)'
        ]
        
        # Create treeview with scrollbars
        tree_scroll = tk.Scrollbar(self.table_frame)
        tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.tree = ttk.Treeview(
            self.table_frame,
            columns=columns,
            show='headings',
            yscrollcommand=tree_scroll.set,
            selectmode='extended',
            height=25
        )
        tree_scroll.config(command=self.tree.yview)
        
        # Configure columns
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=100, anchor='center')
        
        self.tree.pack(fill=tk.BOTH, expand=True)

    def _setup_graph_tab(self):
        """Setup temperature graph with proper formatting"""
        self.fig = Figure(figsize=(10, 5), dpi=100, facecolor='#ecf0f1')
        self.ax = self.fig.add_subplot(111)
        self.ax.set_facecolor('#ecf0f1')
        
        # Formatting
        self.ax.set_title("Temperature Trend", fontsize=14, color='#2c3e50')
        self.ax.set_xlabel("Time", fontsize=12, color='#2c3e50')
        self.ax.set_ylabel("Temperature (°C)", fontsize=12, color='#2c3e50')
        self.ax.grid(True, linestyle='--', alpha=0.7)
        
        # Create canvas
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.graph_frame)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    def refresh_gui(self):
        """Update GUI with new data"""
        # Update status
        elapsed = time.time() - self.last_update
        self.status.config(text=f"Records: {len(records)} | Last update: {elapsed:.1f}s ago")
        self.last_update = time.time()
        
        # Update table
        self.tree.delete(*self.tree.get_children())
        for rec in records[-100:]:  # Show last 100 records
            self.tree.insert('', 'end', values=rec)
        
        # Update graph
        self.update_temperature_graph()
        
        # Schedule next update
        self.after(1000, self.refresh_gui)

    def update_temperature_graph(self):
        """Plot temperature data with correct timestamp handling"""
        times, temps = [], []
        
        for rec in records:
            if rec[0] == 'H':  # Only high-priority packets
                try:
                    # Parse Arduino timestamp: YYYYMMDD-HHMMSS
                    dt = datetime.strptime(rec[1], "%Y%m%d-%H%M%S")
                    temp = float(rec[7])  # Temperature at index 7
                    times.append(dt)
                    temps.append(temp)
                except (ValueError, IndexError):
                    continue
        
        # Update plot
        self.ax.clear()
        if times and temps:
            self.ax.plot(times, temps, 'o-', color='#3498db', linewidth=2, markersize=6)
            
            # Format x-axis with time
            self.ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
            self.ax.xaxis.set_major_locator(mdates.AutoDateLocator())
            self.fig.autofmt_xdate()
            
            # Set titles and labels
            self.ax.set_title("Temperature Trend", fontsize=14, color='#2c3e50')
            self.ax.set_xlabel("Time", fontsize=12, color='#2c3e50')
            self.ax.set_ylabel("Temperature (°C)", fontsize=12, color='#2c3e50')
            self.ax.grid(True, linestyle='--', alpha=0.7)
            
            # Add annotation for latest reading
            last_temp = temps[-1]
            last_time = times[-1]
            self.ax.annotate(f'{last_temp:.1f}°C', 
                            xy=(last_time, last_temp),
                            xytext=(10, -20),
                            textcoords='offset points',
                            arrowprops=dict(arrowstyle='->'))
        
        self.canvas.draw()

def main():
    app = DashboardApp()
    app.mainloop()

if __name__ == '__main__':
    main()
